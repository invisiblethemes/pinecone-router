{"version":3,"file":"alpine-router.module.js","sources":["../src/route.js","../src/utils.js","../src/index.js"],"sourcesContent":["class Route {\n\tconstructor(path, handler) {\n\t\tthis.path = path;\n\t\tthis.handler = handler;\n\t}\n\n\tsetProps(newProps) {\n\t\tthis.props = newProps;\n\t}\n\n\thandle(path) {\n\t\tif (typeof this.handler == 'function') {\n\t\t\treturn this.handler({\n\t\t\t\tprops: this.props,\n\t\t\t\troute: this.path,\n\t\t\t\tpath: path,\n\t\t\t\tquery: window.location.search.substring(1),\n\t\t\t\thash: window.location.hash.substring(1),\n\t\t\t});\n\t\t}\n\t}\n}\n\nexport default Route;\n","const utils = {\n\tisLocation: !!(window.history.location || window.location),\n\tvalidLink(el) {\n\t\t// The checks in this block are taken from page.js https://github.com/visionmedia/page.js/blob/master/index.js#L370\n\t\t// el.nodeName for svg links are 'a' instead of 'A'\n\t\twhile (el && 'A' !== el.nodeName.toUpperCase()) el = el.parentNode;\n\t\tif (!el || 'A' !== el.nodeName.toUpperCase()) return false;\n\n\t\t// check if link is inside an svg\n\t\t// in this case, both href and target are always inside an object\n\t\tvar svg =\n\t\t\ttypeof el.href === 'object' &&\n\t\t\tel.href.constructor.name === 'SVGAnimatedString';\n\n\t\t// Ignore if tag has\n\t\t// 1. \"download\" attribute\n\t\t// 2. rel=\"external\" attribute\n\t\tif (\n\t\t\tel.hasAttribute('download') ||\n\t\t\tel.getAttribute('rel') === 'external'\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar link = el.getAttribute('href');\n\n\t\t// Check for mailto: in the href\n\t\tif (link && link.indexOf('mailto:') > -1) return false;\n\n\t\t// check target\n\t\t// svg target is an object and its desired value is in .baseVal property\n\t\tif (svg ? el.target.baseVal : el.target) return false;\n\n\t\t// x-origin\n\t\t// note: svg links that are not relative don't call click events (and skip page.js)\n\t\t// consequently, all svg links tested inside page.js are relative and in the same origin\n\t\tif (!svg && !this.sameOrigin(el.href)) return false;\n\n\t\treturn true;\n\t},\n\n\t/**\n\t * This takes the document fetched, remove routers already initialized from it\n\t * @param {Document} doc\n\t * @param {array} routes\n\t * @returns {object} {doc, routes}\n\t */\n\tprocessRoutersInFetchedDoc(doc, selector, routes) {\n\t\tlet routersInDoc = doc.querySelectorAll('[x-router]');\n\t\tswitch (routersInDoc.length) {\n\t\t\tcase 0:\n\t\t\t\t// if there is no router in the fetched doc, remove the routes registered\n\t\t\t\t// but only if the selector is body\n\t\t\t\tif (selector == 'body') routes = [];\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\t// the router currently loaded\n\t\t\t\tlet currentRouter = document.querySelector('[x-router]');\n\t\t\t\t// if the router in the doc dont have x-router set to 'loaded'\n\t\t\t\t// thus remove it from the current router element before checking if they're the same\n\t\t\t\tcurrentRouter.setAttribute('x-router', '');\n\t\t\t\t// check if the one in fetched doc is the same as the current one\n\t\t\t\tif (routersInDoc[0].isEqualNode(document.querySelector('[x-router]'))) {\n\t\t\t\t\t// if it is, mark the router as loaded, so routes wont be processed again\n\t\t\t\t\troutersInDoc[0].setAttribute('x-router', 'loaded');\n\t\t\t\t\t// remove the router element currently in the page, in case it is not within the selector.\n\t\t\t\t\tdocument.querySelector('[x-router]').remove();\n\t\t\t\t} else {\n\t\t\t\t\t// if they're not the same remove the routes, the new ones will be added once this new router is added\n\t\t\t\t\troutes = [];\n\t\t\t\t\tdocument.querySelector('[x-router]').remove();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault: // more than one\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Alpine Router: there can only be one router in the same page'\n\t\t\t\t);\n\t\t}\n\n\t\treturn { doc, routes };\n\t},\n\n\t/**\n\t * Match the path with specified routes\n\t * Taken from https://github.com/vijitail/simple-javascript-router/blob/master/src/router/Router.js#L14\n\t * with some modifications to fix bad behavior\n\t */\n\tmatch(route, requestPath) {\n\t\tlet paramNames = [];\n\t\tlet path = route.path.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n\t\tlet regexPath =\n\t\t\tpath.replace(/([:^\\s])(\\w+)/g, (_full, _colon, name) => {\n\t\t\t\tparamNames.push(name);\n\t\t\t\treturn '([^/]+)';\n\t\t\t}) + '(?:/|$)';\n\n\t\tlet params = {};\n\t\tlet routeMatch = requestPath.match(new RegExp(regexPath));\n\t\tif (routeMatch !== null) {\n\t\t\tif (routeMatch.index != 0) return null;\n\t\t\tif (routeMatch.input != routeMatch[0]) return null;\n\t\t\tparams = routeMatch.slice(1).reduce((params, value, index) => {\n\t\t\t\tif (params === null) params = {};\n\t\t\t\tparams[paramNames[index]] = value;\n\t\t\t\treturn params;\n\t\t\t}, null);\n\t\t}\n\n\t\troute.setProps(params);\n\t\treturn routeMatch;\n\t},\n\n\t/**\n\t * Convert to a URL object\n\t * https://github.com/visionmedia/page.js/blob/4f9991658f9b9e3de9b6059bade93693af24d6bd/page.js#L888\n\t */\n\ttoURL(href) {\n\t\tif (typeof URL === 'function' && this.isLocation) {\n\t\t\treturn new URL(href, window.location.toString());\n\t\t} else {\n\t\t\tvar anc = window.document.createElement('a');\n\t\t\tanc.href = href;\n\t\t\treturn anc;\n\t\t}\n\t},\n\n\t/**\n\t * Check if `href` is the same origin.\n\t * https://github.com/visionmedia/page.js/blob/4f9991658f9b9e3de9b6059bade93693af24d6bd/page.js#L888\n\t */\n\tsameOrigin(href) {\n\t\tif (!href || !this.isLocation) return false;\n\n\t\tvar url = this.toURL(href);\n\t\tvar loc = window.location;\n\n\t\t/*\n\t\t   When the port is the default http port 80 for http, or 443 for\n\t\t   https, internet explorer 11 returns an empty string for loc.port,\n\t\t   so we need to compare loc.port with an empty string if url.port\n\t\t   is the default port 80 or 443.\n\t\t   Also the comparition with `port` is changed from `===` to `==` because\n\t\t   `port` can be a string sometimes. This only applies to ie11.\n\t\t*/\n\t\treturn (\n\t\t\tloc.protocol === url.protocol &&\n\t\t\tloc.hostname === url.hostname &&\n\t\t\t(loc.port === url.port ||\n\t\t\t\t(loc.port === '' && (url.port == 80 || url.port == 443)))\n\t\t); // jshint ignore:line\n\t},\n\n\tsamePath(url) {\n\t\tif (!this.isLocation) return false;\n\t\tvar loc = window.location;\n\t\treturn url.pathname === loc.pathname && url.search === loc.search;\n\t},\n};\n\nexport default utils;\n","import Route from './route.js';\nimport utils from './utils.js';\n\nconst AlpineRouter = {\n\t// routes are instantiated from the Routes classs\n\troutes: [],\n\n\t// These can be used to control Alpine Router externally\n\tsettings: {\n\t\tinterceptLinks: true, // detect if links are of the same origin and let Alpine Router handle them\n\t\tbasepath: '/',\n\t\thash: false,\n\t\trender: {\n\t\t\tenabled: false,\n\t\t\tselector: 'body',\n\t\t\tpreload: true,\n\t\t\tpreloadtime: 200, // time to wait after mouse over a link before preloading a page\n\t\t\tpreloaded: { path: null, content: null }, // The content that has been preloaded on mouseover event.\n\t\t},\n\t\tviews: {\n\t\t\tenabled: false,\n\t\t\tbasepath: '/',\n\t\t},\n\t},\n\n\t// This will be set to true after all routers are\n\t// initialized and the first page loaded\n\tloaded: false,\n\n\t// The handler for 404 pages, can be overwritten by a notfound route\n\t// Note that when using x-render, it'll be set to null in order to let server generate the page\n\t// however if setting routes in the router with x-render you must set notfound route as well\n\t// for example this can be used to validate routes in browser.\n\tnotfound: function (path) {\n\t\tconsole.error(`Alpine Router: requested path ${path} was not found`);\n\t},\n\n\t// Entry point of the plugin\n\tstart() {\n\t\tif (!window.Alpine) {\n\t\t\tthrow new Error('Alpine is require for `Alpine Router` to work.');\n\t\t}\n\n\t\t// will be dispatched to window when all routers are\n\t\t// initialized and the first page loaded\n\t\tthis.routerloaded = new Event('routerloaded');\n\t\t// will be dispatched before the handler on the responsible router only and the window\n\t\tthis.loadstart = new Event('loadstart');\n\t\t// will be dispatched after the handler is done on the responsible router only and the window\n\t\tthis.loadend = new Event('loadend');\n\n\t\t// Routers that are already initialized\n\t\tlet currentRouterCount = 0;\n\n\t\t// Whenever a component is initialized, check if it is a router\n\t\t// and check if the children are valid routes\n\t\tAlpine.onComponentInitialized((component) => {\n\t\t\tif (component.$el.hasAttribute('x-router')) {\n\t\t\t\t// This will check if the router is loaded and return,\n\t\t\t\t// it'll be needed when switching a page\n\t\t\t\t// so the router from that page wont be loaded again if it's the same one\n\t\t\t\tif (component.$el.getAttribute('x-router') == 'loaded') return;\n\n\t\t\t\tif (currentRouterCount > 1) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'Alpine Router: Only one router can be in a page.'\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// If using hash routing tell Alpine Router to check for hash everytime it changes\n\t\t\t\t// No need for this as link clicks are handled and pushstate is\n\t\t\t\t// if (this.settings.hash) {\n\t\t\t\t// \twindow.onhashchange = () => {\n\t\t\t\t// \t\t// navigate to the hash route\n\t\t\t\t// \t\tthis.navigate(window.location.hash.substring(1), true);\n\t\t\t\t// \t};\n\t\t\t\t// }\n\n\t\t\t\t// Detect router settings\n\n\t\t\t\t// The router basepath which will be added at the begining\n\t\t\t\t// of every route in this router\n\t\t\t\tif (component.$el.hasAttribute('x-base')) {\n\t\t\t\t\tthis.settings.basepath = el.getAttribute('x-base');\n\t\t\t\t}\n\t\t\t\t// page rendering\n\t\t\t\tif (component.$el.hasAttribute('x-render')) {\n\t\t\t\t\tthis.settings.render.enabled = true;\n\t\t\t\t\t// check if a selector was set\n\t\t\t\t\tlet selector = component.$el.getAttribute('x-render');\n\t\t\t\t\tif (selector != '') {\n\t\t\t\t\t\tthis.settings.render.selector = selector;\n\t\t\t\t\t}\n\t\t\t\t\t// this will disable notfound handling in favor of server rendered 404 page\n\t\t\t\t\t// this can be ovewritten if needed by making a notfound route with a handler\n\t\t\t\t\tthis.notfound = null;\n\t\t\t\t} else {\n\t\t\t\t\t// hash routing, it can't be used with page rendering\n\t\t\t\t\t// too lazy to explain i think it's obvious\n\t\t\t\t\tif (component.$el.hasAttribute('x-hash')) {\n\t\t\t\t\t\tthis.settings.hash = true;\n\t\t\t\t\t}\n\t\t\t\t\t// views rendering, unlike page rendering.\n\t\t\t\t\t// they wont be loaded automatically using path\n\t\t\t\t\t// instead the user decide the view using x-view for each route\n\t\t\t\t\tif (component.$el.hasAttribute('x-views')) {\n\t\t\t\t\t\tthis.settings.views.enabled = true;\n\t\t\t\t\t\t// check if a path for views was set\n\t\t\t\t\t\t// this will be used as a base for all views\n\t\t\t\t\t\tlet path = component.$el.getAttribute('x-render');\n\t\t\t\t\t\tif (path != '') {\n\t\t\t\t\t\t\tthis.settings.views.basepath = path;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Loop through child elements of this router\n\t\t\t\tArray.from(component.$el.children).forEach((el) => {\n\t\t\t\t\t// if the element is a route process it\n\t\t\t\t\tif (el.hasAttribute('x-route')) {\n\t\t\t\t\t\tthis.processRoute(el, component);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tcomponent.$el.setAttribute('x-router', 'loaded');\n\t\t\t\tcurrentRouterCount++;\n\n\t\t\t\tif (!this.settings.hash) {\n\t\t\t\t\t// navigate to the current page to handle it\n\t\t\t\t\t// ONLY if we not using hash routing for the default router\n\t\t\t\t\tthis.navigate(window.location.pathname, false, true);\n\t\t\t\t} else {\n\t\t\t\t\tif (window.location.hash == '') {\n\t\t\t\t\t\tdocument.location.href =\n\t\t\t\t\t\t\twindow.location.pathname + '#/';\n\t\t\t\t\t\treturn;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.navigate(\n\t\t\t\t\t\t\twindow.location.hash.substring(1),\n\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\ttrue\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.loaded = true;\n\t\t\t\twindow.dispatchEvent(this.routerloaded);\n\t\t\t}\n\t\t});\n\n\t\t// Intercept click event in links\n\t\tthis.interceptLinks();\n\n\t\t// handle navigation events not emitted by links, for exmaple, back button.\n\t\twindow.addEventListener('popstate', () => {\n\t\t\tif (this.settings.hash) {\n\t\t\t\tif (window.location.hash != '') {\n\t\t\t\t\tthis.navigate(window.location.hash.substring(1), true);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.navigate(window.location.pathname, true);\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n\t * Add a handler to click events on all links currently in the page\n\t * if using views rendering this will be called everytime the page changes\n\t * this may also be called by the developer if they added other links dynamicly\n\t */\n\tinterceptLinks() {\n\t\tif (this.settings.interceptLinks) {\n\t\t\tdocument.querySelectorAll('a').forEach((el) => {\n\t\t\t\t// check if we already add this link\n\t\t\t\tif (el.hasAttribute('x-link')) return;\n\t\t\t\t// check if the link is a navigation link\n\t\t\t\tif (utils.validLink(el) == false) return;\n\n\t\t\t\t// add an x-link attribute this will tell this function\n\t\t\t\t// that the link already been handled.\n\t\t\t\tel.setAttribute('x-link', '');\n\n\t\t\t\tel.addEventListener('mouseover', (e) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\t!this.settings.render.enabled ||\n\t\t\t\t\t\t!this.settings.render.preload\n\t\t\t\t\t)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tlet path = e.target.getAttribute('href');\n\t\t\t\t\tif (path == null) path = '/';\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis.settings.render.preloaded.path != null &&\n\t\t\t\t\t\tthis.settings.render.preloaded.path == path\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\twindow.setTimeout(function () {\n\t\t\t\t\t\tfetch(path)\n\t\t\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\t\t\treturn response.text();\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\t\t\twindow.AlpineRouter.settings.render.preloaded.path = path;\n\t\t\t\t\t\t\t\twindow.AlpineRouter.settings.render.preloaded.content = response;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}, this.settings.render.preloadtime);\n\t\t\t\t});\n\t\t\t\tel.addEventListener(\n\t\t\t\t\t'click',\n\t\t\t\t\t(e) => {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tlet link = e.target.getAttribute('href');\n\t\t\t\t\t\tif (this.settings.hash) {\n\t\t\t\t\t\t\twindow.location.hash = '#' + link;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.navigate(link);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tfalse\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\t},\n\n\t/**\n\t * Take the template element of a route and the router component\n\t * @param {Element} el the routes HTML element, must be a template tag.\n\t * @param {object} component the router Alpine component\n\t */\n\tprocessRoute(el, component) {\n\t\tif (el.tagName.toLowerCase() !== 'template') {\n\t\t\tthrow new Error(\n\t\t\t\t'Alpine Router: x-route must be used on a template tag.'\n\t\t\t);\n\t\t}\n\n\t\t// The path will be on x-route and handler on x-handler\n\t\t// The path must be a string and the handler a function callback\n\t\tlet path = el.getAttribute('x-route');\n\t\tif (typeof path != 'string') {\n\t\t\tthrow new Error(\n\t\t\t\t`Alpine Router: x-route must be a string, ${typeof path} given.`\n\t\t\t);\n\t\t}\n\n\t\tif (path.indexOf('#') > -1) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Alpine Router: A route's path may not have a hash, setting Alpinethis.settings.hash to true is sufficiant.\"\n\t\t\t);\n\t\t}\n\n\t\tif (this.settings.views) {\n\t\t\t// TODO\n\t\t}\n\n\t\tlet handler = null;\n\t\tif (\n\t\t\tel.hasAttribute('x-handler') == false &&\n\t\t\tthis.settings.views.enabled == false\n\t\t) {\n\t\t\tthrow new Error(\n\t\t\t\t'Alpine Router: x-route must have a handler (x-handler=\"handler\") unless using x-render.'\n\t\t\t);\n\t\t} else if (el.hasAttribute('x-handler')) {\n\t\t\t// Get the hanlder which is a string because it's an attribute value\n\t\t\t// Use that string as an index to the component method which is meant to handle the route\n\t\t\tlet handlerName = el.getAttribute('x-handler');\n\t\t\ttry {\n\t\t\t\thandler = component.getUnobservedData()[handlerName];\n\t\t\t} catch (error) {\n\t\t\t\tthrow new Error('Alpine Router: ' + error);\n\t\t\t}\n\n\t\t\t// Check if the hanlder is a function\n\t\t\tif (typeof handler != 'function') {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Alpine Router: handler must be a callback function, ${typeof handler} given.`\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (path == 'notfound') {\n\t\t\t\t// register the route as a 404 handler\n\t\t\t\tthis.notfound = handler;\n\t\t\t}\n\t\t}\n\n\t\tif (path != 'notfound') {\n\t\t\t// add basepath of the entire page/site\n\t\t\tif (this.settings.basepath != '/') {\n\t\t\t\tpath = this.settings.basepath + path;\n\t\t\t}\n\n\t\t\t// register the new route if possible\n\t\t\tthis.addRoute(path, handler);\n\t\t}\n\t},\n\n\t/**\n\t *  Go to the specified path without reloading\n\t * @param {string} path the path with no hash even if using hash routing\n\t * @param {boolean} frompopstate this will be set to true if called from window.onpopstate event\n\t * @param {boolean} firstload this will be set to true if this is the first page loaded, also from page reload\n\t */\n\tnavigate(path, frompopstate = false, firstload = false) {\n\t\t// process hash route individually\n\t\twindow.dispatchEvent(this.loadstart);\n\t\tif (path == null) {\n\t\t\tpath = '/';\n\t\t}\n\n\t\tconst route = this.routes.find((route) => {\n\t\t\treturn utils.match(route, path);\n\t\t});\n\n\t\tlet notfound =\n\t\t\troute == null &&\n\t\t\t(!this.settings.render.enabled ||\n\t\t\t\t(this.settings.render.enabled && this.notfound != null));\n\n\t\tif (notfound)\n\t\t\tthis.notfound(path);\n\n\t\t// do not call pushstate from popstate event https://stackoverflow.com/a/50830905\n\t\tif (!frompopstate) {\n\t\t\tlet fullpath;\n\n\t\t\tif (this.settings.hash) {\n\t\t\t\tfullpath =\n\t\t\t\t\twindow.location.pathname + window.location.search + path;\n\t\t\t} else {\n\t\t\t\tfullpath = path + window.location.search + window.location.hash;\n\t\t\t}\n\t\t\t// handle many routes for different routers\n\t\t\t// but only push the route once to history\n\t\t\thistory.pushState({ path: fullpath }, '', fullpath);\n\t\t}\n\n\t\t// if using page rendering and the user just (re)loaded the page\n\t\t// dont fetch the content as it is already loaded\n\t\tif (this.settings.render.enabled && !firstload && !this.notfound) {\n\t\t\tif (\n\t\t\t\tthis.settings.render.preloaded.path != null &&\n\t\t\t\tthis.settings.render.preloaded.path == path\n\t\t\t) {\n\t\t\t\tconsole.log('Alpine Router: Using preloaded conteent');\n\t\t\t\tthis.renderContent(\n\t\t\t\t\tthis.settings.render.preloaded.content,\n\t\t\t\t\tthis.settings.render.selector\n\t\t\t\t);\n\t\t\t\tthis.settings.render.preloaded.path = null;\n\t\t\t\tthis.settings.render.preloaded.content = null;\n\t\t\t} else {\n\t\t\t\tfetch(path)\n\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\treturn response.text();\n\t\t\t\t\t})\n\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\tthis.renderContent(\n\t\t\t\t\t\t\tresponse,\n\t\t\t\t\t\t\tthis.settings.render.selector\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// the route can be null in case using page rendering with no routes\n\t\tif (route != null) route.handle(path);\n\n\t\twindow.dispatchEvent(this.loadend);\n\t},\n\n\t/**\n\t *\n\t * @param {string} path\n\t * @param {function} handler\n\t */\n\taddRoute(path, handler) {\n\t\t// check if the route was registered on the same router.\n\t\tif (this.routes.find((r) => r.path == path) != null) {\n\t\t\tthrow new Error('Alpine Router: route already exist');\n\t\t}\n\t\tthis.routes.push(new Route(path, handler));\n\t},\n\n\t/**\n\t * Remove a route\n\t * @param {string} path\n\t */\n\tremoveRoute(path) {\n\t\tthis.routes = this.routes.filter((r) => r.path != path);\n\t},\n\n\t/**\n\t * This will replace the content fetched from `path` into `selector`.\n\t * to use this you need to add x-render to the router\n\t * @param {string} content the html content.\n\t * @param {string} selector the selector of where to put the content.\n\t */\n\trenderContent(content, selector) {\n\t\tlet doc = new DOMParser().parseFromString(content, 'text/html');\n\n\t\tdoc = doc.querySelector(selector);\n\n\t\t// This takes the document fetched, remove routers already initialized from it\n\t\t// and also remove routers initialized but not found in it\n\t\t// that is for routers that are not needed in this page.\n\t\tlet r = utils.processRoutersInFetchedDoc(doc, selector, this.routes);\n\n\t\tdoc = r.doc;\n\t\tthis.routes = r.routes;\n\n\t\t// replace the content of the selector with the fetched content\n\t\tdocument.querySelector(selector).innerHTML = doc.innerHTML;\n\n\t\tthis.interceptLinks();\n\t},\n\t/**\n\t * This will render content by fetching the path specfied in the routes `x-view`.\n\t * \n\t * @summary To use this add `x-views` to the routers element.\n\t * \n\t * NOTE: This will be called *per route*, not *per path*.\n\t * It means if there were two routers in the page with a route to `/a/path`, meaning two routes,\n\t * the content will be fetched from path in *each route's* `x-view` *two times* and replaces content of `x-selector`\n\t * \n\t * This requires routes to have `x-view` for the *path* of content to fetch, and `x-selector` for *where* to put that content.\n\n\t */\n\trenderChunks() {},\n};\n\nconst alpine = window.deferLoadingAlpine || ((callback) => callback());\n\nwindow.AlpineRouter = AlpineRouter;\n\nwindow.deferLoadingAlpine = function (callback) {\n\twindow.AlpineRouter.start();\n\n\talpine(callback);\n};\n\nexport default AlpineRouter;\n"],"names":["Route","constructor","path","handler","this","setProps","newProps","props","handle","route","query","window","location","search","substring","hash","utils","isLocation","history","validLink","el","nodeName","toUpperCase","parentNode","svg","href","name","hasAttribute","getAttribute","link","indexOf","target","baseVal","sameOrigin","processRoutersInFetchedDoc","doc","selector","routes","routersInDoc","querySelectorAll","length","document","querySelector","setAttribute","isEqualNode","remove","Error","match","requestPath","paramNames","regexPath","replace","_full","_colon","push","params","routeMatch","RegExp","index","input","slice","reduce","value","toURL","URL","toString","anc","createElement","url","loc","protocol","hostname","port","samePath","pathname","AlpineRouter","settings","interceptLinks","basepath","render","enabled","preload","preloadtime","preloaded","content","views","loaded","notfound","console","error","start","Alpine","routerloaded","Event","loadstart","loadend","currentRouterCount","onComponentInitialized","component","$el","Array","from","children","forEach","processRoute","navigate","dispatchEvent","addEventListener","e","setTimeout","fetch","then","response","text","preventDefault","tagName","toLowerCase","handlerName","getUnobservedData","addRoute","frompopstate","firstload","find","fullpath","pushState","log","renderContent","r","removeRoute","filter","DOMParser","parseFromString","innerHTML","renderChunks","alpine","deferLoadingAlpine","callback"],"mappings":"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"}