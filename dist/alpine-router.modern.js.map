{"version":3,"file":"alpine-router.modern.js","sources":["../src/route.js","../src/router.js","../src/utils.js","../src/index.js"],"sourcesContent":["class Route {\n\tconstructor(path, handler, router) {\n\t\tthis.path = path;\n\t\tthis.handler = handler;\n\t\tthis.router = router;\n\t}\n\n\tsetProps(newProps) {\n\t\tthis.props = newProps;\n\t}\n\n\thandle() {\n\t\treturn this.handler({props: this.props, path: this.path});\n\t}\n}\n\nexport default Route;","class Router {\n\tconstructor(name, settings) {\n\t\tthis.name = name;\n\t\tthis.settings = settings;\n\t}\n}\n\nexport default Router;","const utils = {\n\tisLocation: !!(window.history.location || window.location),\n\n\tvalidLink(el) {\n\t\t// The checks in this block are taken from page.js https://github.com/visionmedia/page.js/blob/master/index.js#L370\n\t\t// el.nodeName for svg links are 'a' instead of 'A'\n\t\twhile (el && 'A' !== el.nodeName.toUpperCase()) el = el.parentNode;\n\t\tif (!el || 'A' !== el.nodeName.toUpperCase()) return false;\n\n\t\t// check if link is inside an svg\n\t\t// in this case, both href and target are always inside an object\n\t\tvar svg =\n\t\t\ttypeof el.href === 'object' &&\n\t\t\tel.href.constructor.name === 'SVGAnimatedString';\n\n\t\t// Ignore if tag has\n\t\t// 1. \"download\" attribute\n\t\t// 2. rel=\"external\" attribute\n\t\tif (\n\t\t\tel.hasAttribute('download') ||\n\t\t\tel.getAttribute('rel') === 'external'\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar link = el.getAttribute('href');\n\n\t\t// Check for mailto: in the href\n\t\tif (link && link.indexOf('mailto:') > -1) return false;\n\n\t\t// check target\n\t\t// svg target is an object and its desired value is in .baseVal property\n\t\tif (svg ? el.target.baseVal : el.target) return false;\n\n\t\t// x-origin\n\t\t// note: svg links that are not relative don't call click events (and skip page.js)\n\t\t// consequently, all svg links tested inside page.js are relative and in the same origin\n\t\tif (!svg && !this.sameOrigin(el.href)) return false;\n\n\t\treturn true;\n\t},\n\n\t/**\n\t * Match the path with specified routes\n\t * https://github.com/vijitail/simple-javascript-router/blob/master/src/router/Router.js#L14\n\t */\n\tmatch(route, requestPath) {\n\t\tlet paramNames = [];\n\t\tlet regexPath =\n\t\t\troute.path.replace(/([:^#])(\\w+)/g, (_full, _colon, name) => {\n\t\t\t\tparamNames.push(name);\n\t\t\t\treturn '([^/]+)';\n\t\t\t}) + '(?:/|$)';\n\n\t\tlet params = {};\n\t\tlet routeMatch = requestPath.match(new RegExp(regexPath));\n\t\tif (routeMatch !== null) {\n\t\t\tparams = routeMatch.slice(1).reduce((params, value, index) => {\n\t\t\t\tif (params === null) params = {};\n\t\t\t\tparams[paramNames[index]] = value;\n\t\t\t\treturn params;\n\t\t\t}, null);\n\t\t}\n\n\t\troute.setProps(params);\n\n\t\treturn routeMatch;\n\t},\n\n\t/**\n\t * Convert to a URL object\n\t * https://github.com/visionmedia/page.js/blob/4f9991658f9b9e3de9b6059bade93693af24d6bd/page.js#L888\n\t */\n\ttoURL(href) {\n\t\tif (typeof URL === 'function' && this.isLocation) {\n\t\t\treturn new URL(href, window.location.toString());\n\t\t} else {\n\t\t\tvar anc = window.document.createElement('a');\n\t\t\tanc.href = href;\n\t\t\treturn anc;\n\t\t}\n\t},\n\n\t/**\n\t * Check if `href` is the same origin.\n\t * https://github.com/visionmedia/page.js/blob/4f9991658f9b9e3de9b6059bade93693af24d6bd/page.js#L888\n\t */\n\tsameOrigin(href) {\n\t\tif (!href || !this.isLocation) return false;\n\n\t\tvar url = this.toURL(href);\n\t\tvar loc = window.location;\n\n\t\t/*\n\t\t   When the port is the default http port 80 for http, or 443 for\n\t\t   https, internet explorer 11 returns an empty string for loc.port,\n\t\t   so we need to compare loc.port with an empty string if url.port\n\t\t   is the default port 80 or 443.\n\t\t   Also the comparition with `port` is changed from `===` to `==` because\n\t\t   `port` can be a string sometimes. This only applies to ie11.\n\t\t*/\n\t\treturn (\n\t\t\tloc.protocol === url.protocol &&\n\t\t\tloc.hostname === url.hostname &&\n\t\t\t(loc.port === url.port ||\n\t\t\t\t(loc.port === '' && (url.port == 80 || url.port == 443)))\n\t\t); // jshint ignore:line\n\t},\n\n\tsamePath(url) {\n\t\tif (!this.isLocation) return false;\n\t\tvar loc = window.location;\n\t\treturn url.pathname === loc.pathname && url.search === loc.search;\n\t},\n\n\t/**\n\t * Take the router's element and check for settings attribute\n\t */\n\tdetectRouterSettings(el) {\n\t\tlet routerSettings = {};\n\t\t// The router basepath which will be added at the begining\n\t\t// of every route in this router\n\t\tif (el.hasAttribute('x-base')) {\n\t\t\trouterSettings.base = el.getAttribute('x-base');\n\t\t}\n\t\trouterSettings.hash = el.hasAttribute('x-hash')\n\t\treturn routerSettings;\n\t},\n};\n\nexport default utils;\n","import Route from './route.js';\nimport Router from './router.js';\nimport utils from './utils.js';\n\nconst AlpineRouter = {\n\t// routes are instantiated from the Routes classs\n\troutes: [],\n\thashroutes: [],\n\n\t// array of trings that hold routers name which must be unique.\n\trouters: [],\n\n\t// These can be used to control Alpine Router externally\n\tsettings: {\n\t\tinterceptLinks: true, // detect if links are of the same origin and let Alpine Router handle them\n\t\tbasepath: '/',\n\t},\n\n\t// This will be set to true after all routers are\n\t// initialized and the first page loaded\n\tloaded: false,\n\n\t// This will be set to true if a router (or more) in the page uses Hash routing\n\thasHashRouter: false,\n\n\t// The handler for 404 pages, can be overwritten by a custom route\n\tnotfound: function (path) {\n\t\tconsole.error(`Alpine Router: requested path ${path} was not found`);\n\t},\n\n\t// Entry point of the plugin\n\tstart() {\n\t\tif (!window.Alpine) {\n\t\t\tthrow new Error('Alpine is require for `Alpine Router` to work.');\n\t\t}\n\n\t\t// will be dispatched to window when all routers are\n\t\t// initialized and the first page loaded\n\t\tthis.routerloaded = new Event('routerloaded');\n\t\t// will be dispatched before the handler on the responsible router only and the window\n\t\tthis.loadstart = new Event('loadstart');\n\t\t// will be dispatched after the handler is done on the responsible router only and the window\n\t\tthis.loadend = new Event('loadend');\n\t\t// will be dispatched after the hash change is done on the responsible router only and the window\n\t\tthis.loadend = new Event('hashchanged');\n\n\t\t// Get the amout of routers in the page at load.\n\t\t// However routers may be added dynamically and they will also be initialized.\n\t\tlet routerCount = document.querySelectorAll('[x-data][x-router]')\n\t\t\t.length;\n\n\t\t// Routers that are already initialized\n\t\tlet currentRouterCount = 0;\n\n\t\t// Whenever a component is initialized, check if it is a router\n\t\t// and check if the children are valid routes\n\t\tAlpine.onComponentInitialized((component) => {\n\t\t\tif (component.$el.hasAttribute('x-router')) {\n\t\t\t\t// take the router name if specified\n\t\t\t\tlet routerName = component.$el.getAttribute('x-router');\n\t\t\t\tif (typeof routerName != 'string') {\n\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t'Alpine Router: x-router attribute should be a string of the router name or empty for default'\n\t\t\t\t\t);\n\t\t\t\t\trouterName = 'default';\n\t\t\t\t}\n\n\t\t\t\t// empty x-router will turn to default,\n\t\t\t\t// to easily querySelector() the router later on in this.navigate\n\t\t\t\tif (routerName == '') {\n\t\t\t\t\trouterName = 'default';\n\t\t\t\t\tcomponent.$el.setAttribute('x-router', routerName);\n\t\t\t\t}\n\n\t\t\t\t// A router must have a unique name\n\t\t\t\t// each route will have the name of its router (see this.processRoute() in next lines)\n\t\t\t\tif (this.routers.findIndex((r) => r.name == routerName) > -1) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`Alpine Router: A router with the name ${routerName} already exist. Use a different name by setting the attribute x-router to another value`\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (typeof routerName != 'string') {\n\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t'Alpine Router: x-router attribute should be a string of the router name or empty for default'\n\t\t\t\t\t);\n\t\t\t\t\trouterName = 'default';\n\t\t\t\t}\n\n\t\t\t\t// Detect other router settings\n\t\t\t\tlet routerSettings = utils.detectRouterSettings(component.$el);\n\t\t\t\t// If this router uses hash routing tell Alpine Router to check for hash everytime it changes\n\t\t\t\tif (routerSettings.hash && !this.hasHashRouter) {\n\t\t\t\t\tthis.hasHashRouter = true;\n\t\t\t\t\twindow.onhashchange = (ev) => {\n\t\t\t\t\t\t// navigate to the hash route, second argument is set to true when the path is a hash\t;\n\t\t\t\t\t\tthis.navigate(window.location.hash.substring(1), true);\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\t// Loop through child elements of this router\n\t\t\t\tArray.from(component.$el.children).forEach((el) => {\n\t\t\t\t\t// if the element is a route process it\n\t\t\t\t\tif (el.hasAttribute('x-route')) {\n\t\t\t\t\t\tthis.processRoute(\n\t\t\t\t\t\t\tel,\n\t\t\t\t\t\t\tcomponent,\n\t\t\t\t\t\t\trouterName,\n\t\t\t\t\t\t\trouterSettings\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Add the router name to the routers array to check for its existance\n\t\t\t\tthis.routers.push(new Router(routerName, routerSettings));\n\n\t\t\t\tcurrentRouterCount++;\n\n\t\t\t\t// this will run when all routers are set up\n\t\t\t\t// in order to handle the current page\n\t\t\t\tif (currentRouterCount == routerCount) {\n\t\t\t\t\t// navigate to the current page to handle it\n\t\t\t\t\tthis.navigate(location.pathname);\n\t\t\t\t\t// if there is hashrouters handle the current hashroute\n\t\t\t\t\tif (this.hasHashRouter && window.location.hash.length) {\n\t\t\t\t\t\tthis.navigate(window.location.hash.substring(1), true);\n\t\t\t\t\t}\n\t\t\t\t\tthis.loaded = true;\n\t\t\t\t\twindow.dispatchEvent(this.routerloaded);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// Intercept click event in links\n\t\tif (this.settings.interceptLinks) {\n\t\t\tdocument.querySelectorAll('a').forEach((el) => {\n\t\t\t\t// check if the link should watched for click events.\n\t\t\t\tif (utils.validLink(el) == false) return;\n\n\t\t\t\tel.addEventListener(\n\t\t\t\t\t'click',\n\t\t\t\t\t(e) => {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tlet link = e.target.getAttribute('href');\n\t\t\t\t\t\t// second parameter passed check if this is a hash link\n\t\t\t\t\t\tthis.navigate(link, link.indexOf('#') == 0);\n\t\t\t\t\t},\n\t\t\t\t\tfalse\n\t\t\t\t);\n\t\t\t});\n\t\t} else {\n\t\t\t// If we're not intercepting all links, only watch ones with x-link attribute\n\t\t\tdocument.querySelectorAll('a[x-link]').forEach((el) => {\n\t\t\t\tel.addEventListener(\n\t\t\t\t\t'click',\n\t\t\t\t\t(e) => {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tlet link = e.target.getAttribute('x-link');\n\t\t\t\t\t\tthis.navigate(link, link.indexOf('#') == 0);\n\t\t\t\t\t},\n\t\t\t\t\tfalse\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\n\t\t// handle navigation events not emitted by links, for exmaple, back button.\n\t\twindow.addEventListener('popstate', (e) => {\n\t\t\tthis.navigate(window.location.hash, true, true);\n\t\t\tthis.navigate(window.location.pathname, false, true);\n\t\t});\n\t},\n\n\t/**\n\t * Take the template element of a route and the router component\n\t * and test if it can be added or not\n\t */\n\tprocessRoute(el, component, routerName, routerSettings) {\n\t\tif (el.tagName.toLowerCase() !== 'template') {\n\t\t\tthrow new Error(\n\t\t\t\t'Alpine Router: x-route must be used on a template tag.'\n\t\t\t);\n\t\t}\n\n\t\tif (el.hasAttribute('x-handler') == false) {\n\t\t\tthrow new Error(\n\t\t\t\t'Alpine Router: x-route must have a handler (x-handler=\"handler\")'\n\t\t\t);\n\t\t}\n\n\t\t// The path will be on x-route and handler on x-handler\n\t\t// The path must be a string and the handler a function callback\n\t\tlet path = el.getAttribute('x-route');\n\t\tif (typeof path != 'string') {\n\t\t\tthrow new Error(\n\t\t\t\t`Alpine Router: x-route must be a string, ${typeof path} given.`\n\t\t\t);\n\t\t}\n\n\t\tif (path.indexOf('#') != -1) {\n\t\t\tthrow new Error(\n\t\t\t\t'Alpine Router: A route path may not have a hash, setting x-hash on the router is sufficient.'\n\t\t\t);\n\t\t}\n\n\t\tlet handlerName = el.getAttribute('x-handler');\n\t\tlet handler;\n\t\ttry {\n\t\t\thandler = component.getUnobservedData()[handlerName];\n\t\t} catch (error) {\n\t\t\tthrow new Error('Alpine Router: ' + error);\n\t\t}\n\n\t\tif (typeof handler != 'function') {\n\t\t\tthrow new Error(\n\t\t\t\t`Alpine Router: handler must be a callback function, ${typeof handler} given.`\n\t\t\t);\n\t\t}\n\n\t\tif (path == 'notfound') {\n\t\t\t// register the route as a 404 handler\n\t\t\tthis.notfound = handler;\n\t\t} else {\n\t\t\t// add basepath of the entire page/site\n\t\t\tif (this.settings.basepath != '/') {\n\t\t\t\tpath = basepath + path;\n\t\t\t}\n\n\t\t\t// add basepath of the router\n\t\t\tif (routerSettings.base != null) {\n\t\t\t\tpath = routerSettings.base + path;\n\t\t\t}\n\n\t\t\tif (routerSettings.hash) {\n\t\t\t\t// check if the route was registered on the same router.\n\t\t\t\t// this allow having multiple routers with the same route\n\t\t\t\t// for example a router for navigation and router for content\n\t\t\t\tlet routeExist = this.hashroutes\n\t\t\t\t\t.filter((route) => utils.match(route, path))\n\t\t\t\t\t.forEach((e) => {\n\t\t\t\t\t\tif (e.router == routerName) return true;\n\t\t\t\t\t});\n\t\t\t\tif (routeExist == true) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'Alpine Router: HashRoute `${path}` is already registered on router `${routerName}`.'\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t// register the new route.\n\t\t\t\t\tthis.hashroutes.push(new Route(path, handler, routerName));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// check if the route was registered on the same router.\n\t\t\t\t// this allow having multiple routers with the same route\n\t\t\t\t// for example a router for navigation and router for content\n\t\t\t\tlet routeExist = this.routes\n\t\t\t\t\t.filter((route) => utils.match(route, path))\n\t\t\t\t\t.forEach((e) => {\n\t\t\t\t\t\tif (e.router == routerName) return true;\n\t\t\t\t\t});\n\t\t\t\tif (routeExist == true) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'Alpine Router: Route `${path}` is already registered on router `${routerName}`.'\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t// register the new route.\n\t\t\t\t\tthis.routes.push(new Route(path, handler, routerName));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Go to the specified path without reloading\n\t * Based on https://github.com/vijitail/simple-javascript-router/blob/master/src/router/Router.js#L37\n\t */\n\tnavigate(path, hash = false, frompopstate = false) {\n\t\t// process hash route individually\n\t\twindow.dispatchEvent(this.loadstart);\n\t\tconst routes = this.routes.filter((route) => {\n\t\t\tif (hash) {\n\t\t\t\treturn route.router.settings.hash && utils.match(route, path);\n\t\t\t}\n\t\t\treturn utils.match(route, path);\n\t\t});\n\t\tif (routes.length == 0) this.notfound(path);\n\t\t// do not call pushstate from popstate event https://stackoverflow.com/a/50830905\n\t\tif (!frompopstate) {\n\t\t\t// handle many routes for different routers\n\t\t\t// but only push the route once to history\n\t\t\tlet fullpath;\n\t\t\tif (hash) {\n\t\t\t\tfullpath = window.location.pathname + path;\n\t\t\t} else {\n\t\t\t\tfullpath = path + window.location.hash;\n\t\t\t}\n\t\t\thistory.pushState({ path: fullpath }, '', fullpath);\n\t\t}\n\n\t\troutes.forEach((route) => {\n\t\t\t// let routerEl = document.querySelector(\n\t\t\t// \t`[x-router=\"${route.router}\"]`\n\t\t\t// );\n\t\t\t// routerEl.dispatchEvent(this.loadstart);\n\t\t\troute.handle();\n\t\t\t// routerEl.dispatchEvent(this.loadend);\n\t\t});\n\t\tif (hash) {\n\t\t\twindow.dispatchEvent(this.hashchanged);\n\t\t}\n\t\twindow.dispatchEvent(this.loadend);\n\t},\n};\n\nconst alpine = window.deferLoadingAlpine || ((callback) => callback());\n\nwindow.AlpineRouter = AlpineRouter;\n\nwindow.deferLoadingAlpine = function (callback) {\n\twindow.AlpineRouter.start();\n\n\talpine(callback);\n};\n\nexport default AlpineRouter;\n"],"names":["Route","constructor","path","handler","router","this","setProps","newProps","props","handle","Router","name","settings","utils","isLocation","window","history","location","validLink","el","nodeName","toUpperCase","parentNode","svg","href","hasAttribute","getAttribute","link","indexOf","target","baseVal","sameOrigin","match","route","requestPath","paramNames","regexPath","replace","_full","_colon","push","params","routeMatch","RegExp","slice","reduce","value","index","toURL","URL","toString","anc","document","createElement","url","loc","protocol","hostname","port","samePath","pathname","search","detectRouterSettings","routerSettings","base","hash","AlpineRouter","routes","hashroutes","routers","interceptLinks","basepath","loaded","hasHashRouter","notfound","console","error","start","Alpine","Error","routerloaded","Event","loadstart","loadend","routerCount","querySelectorAll","length","currentRouterCount","onComponentInitialized","component","$el","routerName","warn","setAttribute","findIndex","r","onhashchange","ev","navigate","substring","Array","from","children","forEach","processRoute","dispatchEvent","addEventListener","e","preventDefault","tagName","toLowerCase","handlerName","getUnobservedData","filter","frompopstate","fullpath","pushState","hashchanged","alpine","deferLoadingAlpine","callback"],"mappings":"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"}